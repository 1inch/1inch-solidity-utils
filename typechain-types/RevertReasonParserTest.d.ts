/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RevertReasonParserTestContract
  extends Truffle.Contract<RevertReasonParserTestInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RevertReasonParserTestInstance>;
}

type AllEvents = never;

export interface RevertReasonParserTestInstance
  extends Truffle.ContractInstance {
  assertion(txDetails?: Truffle.TransactionDetails): Promise<void>;

  emptyRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

  emptyStringRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

  longStringRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

  nonEmptyRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testAssertion(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testEmptyRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testEmptyStringRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testLongStringRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testNonEmptyRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testParseWithThrow(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testWithThrow(txDetails?: Truffle.TransactionDetails): Promise<void>;

  withoutAssertion(txDetails?: Truffle.TransactionDetails): Promise<void>;

  methods: {
    assertion(txDetails?: Truffle.TransactionDetails): Promise<void>;

    emptyRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

    emptyStringRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

    longStringRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

    nonEmptyRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

    testAssertion(txDetails?: Truffle.TransactionDetails): Promise<void>;

    testEmptyRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

    testEmptyStringRevert(
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    testLongStringRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

    testNonEmptyRevert(txDetails?: Truffle.TransactionDetails): Promise<void>;

    testParseWithThrow(txDetails?: Truffle.TransactionDetails): Promise<void>;

    testWithThrow(txDetails?: Truffle.TransactionDetails): Promise<void>;

    withoutAssertion(txDetails?: Truffle.TransactionDetails): Promise<void>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
